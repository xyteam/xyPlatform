# sudo docker build --tag xyplatform:lubuntu1604 --file Dockerfile1604 .

FROM ubuntu:16.04
MAINTAINER Xinyu Wang <xywang68@gmail.com>
USER root

ENV JAVA_VERSION 8
ENV JAVA_HOME /usr/lib/jvm/java-8-oracle
ENV DEBIAN_FRONTEND noninteractive
# ENV http_proxy http://corporate.proxy:80
# ENV https_proxy http://corporate.proxy:80

# upload files
# ADD environment /etc/environment
# ADD apt.conf /etc/apt/apt.conf
# ADD corporate_cacerts /usr/share/ca-certificates/corporate_cacerts

# apt install essential tools for apt install/upgrade
RUN apt clean -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" 
RUN apt update -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" 
RUN apt full-upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" 
RUN apt install -q -y --allow-unauthenticated --fix-missing --no-install-recommends -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
        apt-utils curl wget software-properties-common sudo tzdata
# Set the timezone.
RUN sudo dpkg-reconfigure -f noninteractive tzdata

# # install standard linux tools needed for automation framework
RUN apt install -q -y --allow-unauthenticated --fix-missing --no-install-recommends -o Dpkg::Options::="--force-confdef" \
 -o Dpkg::Options::="--force-confold" \
    autofs \
    binutils \
    build-essential \
    dirmngr \
    ffmpeg \
    fonts-liberation \
    git \
    imagemagick \
    java-common \
    libappindicator3-1 \
    libatk-bridge2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libopencv-dev \
    libpython2.7-stdlib \
    libpython3-stdlib \
    libxss1 \
    locales \
    lsof \
    lubuntu-core \
    maven \
    ntpdate \
    openjdk-8-jdk \
    openjdk-8-jre \
    python2.7-dev \
    python2.7-minimal \
    python3-dev \
    python3-minimal \
    python3-pip \
    python-pip \
    rdesktop \
    rsync \
    sqlite3 \
    sshfs \
    tdsodbc \
    tesseract-ocr \
    tree \
    unixodbc \
    unixodbc-dev \
    wmctrl \
    xclip \
    xdg-utils \
    xdotool \
    xvfb \
    zlib1g-dev

# install additional tools (chrome and java) needed for automation framework
RUN update-ca-certificates

# instal google-chrome
RUN rm -f /etc/apt/sources.list.d/google-chrome.list && \
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list && \
                wget -qO- --no-check-certificate https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \
        apt update -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"  && \
                apt install -q -y --allow-unauthenticated --fix-missing -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
                google-chrome-stable

# install java8
# RUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu bionic main' > /etc/apt/sources.list && \
#     # apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 && \
#     # apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A87FF9DF48BF1C90 && \
#     curl -sL "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC2518248EEA14886" | sudo apt-key add && \
#     curl -sL "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xA87FF9DF48BF1C90" | sudo apt-key add && \
#     apt update -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"  && \
#     echo oracle-java${JAVA_VERSION}-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \
#             apt install -q -y --allow-unauthenticated --fix-missing -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
#             oracle-java${JAVA_VERSION}-installer oracle-java${JAVA_VERSION}-set-default

# final autoremove
RUN apt update -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" 
RUN apt --purge autoremove -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
RUN mkdir -p /tmp/.X11-unix
RUN chmod 1777  /tmp/.X11-unix
RUN ln -s /usr/lib/jni/libopencv_java*.so /usr/lib/libopencv_java.so

# run finishing set up
RUN /usr/sbin/locale-gen "en_US.UTF-8"; echo LANG="en_US.UTF-8" > /etc/locale.conf
RUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

# create u900:g900 for l1604Base vagrant
RUN groupadd g900 -g 900
RUN useradd -u 900 -g g900 \
    -m -d /home/u900 -s /bin/bash \
    -G sudo \
    -p '$6$sn/6mAt0$NbuFud/aFMN4YdpY2xRMyA5JrH.V212IAGxyRgKji3f2UGSkaXbMujkbG0csPnYoi5ktkgnHaTsHJ20TldwTZ/' \
    u900

# create u1000:g1000 for l1604Base vagrant
RUN groupadd g1000 -g 1000
RUN useradd -u 1000 -g g1000 \
    -m -d /home/u1000 -s /bin/bash \
    -G sudo \
    -p '$6$sn/6mAt0$NbuFud/aFMN4YdpY2xRMyA5JrH.V212IAGxyRgKji3f2UGSkaXbMujkbG0csPnYoi5ktkgnHaTsHJ20TldwTZ/' \
    u1000

# create u500:g500 for aws ec2-user
RUN groupadd g500 -g 500
RUN useradd -u 500 -g g500 \
    -m -d /home/u500 -s /bin/bash \
    -G sudo \
    -p '$6$sn/6mAt0$NbuFud/aFMN4YdpY2xRMyA5JrH.V212IAGxyRgKji3f2UGSkaXbMujkbG0csPnYoi5ktkgnHaTsHJ20TldwTZ/' \
    u500

# # create u306267:g306267 for aws build
# RUN groupadd g306267 -g 306267
# RUN useradd -u 306267 -g g306267 \
#   -m -d /home/u306267 -s /bin/bash \
#   -G sudo \
#   -p '$6$sn/6mAt0$NbuFud/aFMN4YdpY2xRMyA5JrH.V212IAGxyRgKji3f2UGSkaXbMujkbG0csPnYoi5ktkgnHaTsHJ20TldwTZ/' \
#   u306267

# #####################################################################
# This Dockerfile ends here. Below is additional information.
# 
# # To prepare for AutoBDD test, perform this only once:
# wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
# source .bashrc
# nvm install --lts v8
# spr
# cd ~/Run/AutoBDD
# npm install
# . .autoPathrc.sh
# selenium-standalone install --config=./framework/configs/selenium-standalone_config.js
# selenium-standalone start --config=./framework/configs/selenium-standalone_config.js > /dev/null 2>&1 & 

# # Spin up docker container and bash inside the docker container:
# sudo docker run -it --rm=true --user=u$(id -u) --privileged \
#   -v $HOME/Run:/home/u$(id -u)/Run \
#   -v $HOME/.bashrc:/home/u$(id -u)/.bashrc \
#   -v $HOME/.pki:/home/u$(id -u)/.pki \
#   -v $HOME/.nvm:/home/u$(id -u)/.nvm \
#   --net=host \
#   --shm-size 256M \
#   xyplatform:lubuntu1604 \
#   /bin/bash

# # Run test manually inside docker container:
# cd
# . .bashrc
# nvm use v8
# cd ~/Run/AutoBDD
# npm rebuild
# . .autoPathrc.sh
# ./framework/scripts/chimp_autorun.py --parallel 4 --movie 1 --platform Linux --browser CH --module test-webpage test-download

# # run test from docker host with 2 docker containers one for each test module (suite):
# sudo docker run -d --rm=true --user=u$(id -u) \
#   -v $HOME/Run:/home/u$(id -u)/Run \
#   -v $HOME/.bashrc:/home/u$(id -u)/.bashrc \
#   -v $HOME/.pki:/home/u$(id -u)/.pki \
#   -v $HOME/.nvm:/home/u$(id -u)/.nvm \
#   --net=host \
#   --shm-size 256M \
#   xyplatform:lubuntu1604 \
#   /bin/bash -c "cd; . .bashrc; . .nvm/nvm.sh; . .nvm/bash_completion; nvm use v8; cd ~/Run/AutoBDD; npm rebuild; . .autoPathrc.sh; ./framework/scripts/chimp_autorun.py --parallel 2 --movie 1 --platform Linux --browser CH --module test-webpage"
# sudo docker run -d --rm=true --user=u$(id -u) --privileged \
#   -v $HOME/Run:/home/u$(id -u)/Run \
#   -v $HOME/.bashrc:/home/u$(id -u)/.bashrc \
#   -v $HOME/.pki:/home/u$(id -u)/.pki \
#   -v $HOME/.nvm:/home/u$(id -u)/.nvm \
#   --net=host \
#   --shm-size 256M \
#   xyplatform:lubuntu1604 \
#   /bin/bash -c "cd; . .bashrc; . .nvm/nvm.sh; . .nvm/bash_completion; nvm use v8; cd ~/Run/AutoBDD; npm rebuild; . .autoPathrc.sh; ./framework/scripts/chimp_autorun.py --parallel 2 --movie 1 --platform Linux --browser CH --module test-download"
# #####################################################################
