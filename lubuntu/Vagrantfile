# Require YAML module
require 'yaml'
# Read YAML file with box details
configs = YAML.load_file('configs.yaml') 

# Define boxes array and variables for each box entry.
# These variables by themself do not do anyting, they are used in the box configuration below
# Caution: Uncommented box entry will be active entry if a vagrant command is issued without a box target. 
boxes = [
  # {:name => "l1604Base", :box_name => 'geerlingguy/ubuntu1604', :box_url => 'https://app.vagrantup.com/geerlingguy/boxes/ubuntu1604',
  #   :ssh_host_port=>1022, :http80=>1080, :http8080=>1880, :http8082=>1882, :tensor6006=>6106, :tensor6008=>6208},
  {:name => "l1804Base", :box_name => 'geerlingguy/ubuntu1804', :box_url => 'https://app.vagrantup.com/geerlingguy/boxes/ubuntu1804',
    :ssh_host_port=>2022, :http80=>2080, :http8080=>2880, :http8082=>2882, :http3000=>2300, :http8000=>2800},
  # {:name => "l1604Desktop", :box_name => 'lubuntu1604-desktop', :box_url => 'file://./lubuntu1604-desktop.box',
  #   :ssh_host_port=>1022, :http80=>1080, :http8080=>1880, :http8082=>1882}
  # {:name => "l1804Desktop", :box_name => 'lubuntu1604-desktop', :box_url => 'file://./lubuntu1804-desktop.box',
  #   :ssh_host_port=>2022, :http80=>2080, :http8080=>2880, :http8082=>2882}
] # boxes []

Vagrant.configure(2) do |config|

  ##############################################################
  # Below we configure common stuff for all VMs in this folder #

  # set virtualbox properties for the box
  config.vm.provider "virtualbox" do |vb|
    vb.linked_clone = true
    vb.gui = true
    vb.cpus = configs['cpus']
    vb.memory = configs['memory']
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vboxvga"]
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--vrde", "off"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--boot1", "disk"]
    vb.customize ["modifyvm", :id, "--usb", "off"]
    vb.customize ["modifyvm", :id, "--usbehci", "off"]
    vb.customize ["modifyvm", :id, "--usbxhci", "off"]
    vb.customize ["modifyvm", :id, "--audio", "none"]
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root", "1"]
    vb.customize ["storageattach", :id, "--storagectl", "IDE Controller", "--port", "0", "--device", "1", "--type", "dvddrive", "--medium", "emptydrive"]
    vb.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/ --timesync-set-threshold", 10000]
  end # config.vm.provider "virtualbox" do |vb|

  # Above we configure common stuff for all VMs in this folder #
  # ############################################################

  # Here we configure and provision each active box name in the boxes array
  boxes.each do |box|
    # common stuff
    # config.ssh.private_key_path = ['../global/platform_id_rsa']
    # config.ssh.insert_key = true

    config.ssh.forward_agent = true
    config.ssh.username = "#{configs['vagrant_user']}"

    # change to true right after VirtualBox/VBGuest upgrade
      if Vagrant.has_plugin?("vagrant-vbguest")
        config.vbguest.auto_update = false
    end
    
    # set timezone to California
    if Vagrant.has_plugin?("vagrant-timezone")
      config.timezone.value = configs['timezone_value']
    end
    
    # upload corporate cacerts
    if Vagrant.has_plugin?("vagrant-ca-certificates")
      config.ca_certificates.enabled = true
      config.ca_certificates.certs = [
        '../global/corporate_cacerts/GeoTrustGlobalCA.crt'
      ]
    end

    config.vm.define box[:name] do |linuxbox|
      linuxbox.trigger.before :provision do |trigger|
        trigger.info = "Checking platform key"
        trigger.run = {path: "../global/check_platformKey.sh"}
      end # linuxbox.trigger.before :provision do |trigger|

      linuxbox.vm.box = box[:box_name]
      linuxbox.vm.box_url = box[:box_url]
      linuxbox.vm.box_download_insecure = true
      linuxbox.vm.box_check_update = false
      linuxbox.vm.hostname = box[:name]
      linuxbox.vm.network :forwarded_port, guest: 22, host: box[:ssh_host_port], id: "ssh", auto_correct: true
      linuxbox.vm.network :forwarded_port, guest: 80, host: box[:http80], id: "http80", auto_correct: false
      linuxbox.vm.network :forwarded_port, guest: 8080, host: box[:http8080], id: "http8080", auto_correct: false
      linuxbox.vm.network :forwarded_port, guest: 8082, host: box[:http8082], id: "http8082", auto_correct: false
      linuxbox.vm.network :forwarded_port, guest: 3000, host: box[:http3000], id: "http3000", auto_correct: false
      linuxbox.vm.network :forwarded_port, guest: 8000, host: box[:http8000], id: "http8000", auto_correct: false
      linuxbox.vm.provider "virtualbox" do |vb|
        vb.name = box[:name]
      end

      # configure proxy settings
      if (Vagrant.has_plugin?("vagrant-proxyconf") && (!configs['http_proxy_host_port'].to_s.empty?) )
        config.proxy.enabled  = {npm: false}
        config.proxy.http     = "http://#{configs['http_proxy_host_port']}"
        config.proxy.https    = "http://#{configs['https_proxy_host_port']}"
        config.proxy.no_proxy = "#{configs['no_proxy']}"
      end      
      # Base on box name:
      # When the lxxxxBase VM is installed properly user can vagrant package the lxxxxBase VM into a vagrant box
      # and use lxxxxDesktop as the new VM name which will skip all installation for faster deployment
      # see the commented lines in the 'boxes array' above
      # Below 2 lines will display variable nemes for debugging purpose
      # puts "box name: " + linuxbox.vm.box.to_s
      # puts "vm name: " + box[:name].to_s
      unless linuxbox.vm.box.to_s.include? "desktop"
        linuxbox.vm.provision "apt_upgrade.sh",            type: :shell, path: "apt_upgrade.sh",             privileged: true
        linuxbox.vm.provision "apt_update.sh",             type: :shell, path: "apt_update.sh",              privileged: true
        linuxbox.vm.provision "apt_install.sh",            type: :shell, path: "apt_install.sh",             privileged: true
        # linuxbox.vm.provision "apt_installJava.sh",        type: :shell, path: "apt_installJava.sh",         privileged: true
        linuxbox.vm.provision "apt_installJenkins.sh",     type: :shell, path: "apt_installJenkins.sh",      privileged: true
        linuxbox.vm.provision "apt_installChrome.sh",      type: :shell, path: "apt_installChrome.sh",       privileged: true
        linuxbox.vm.provision "apt_installDocker.sh",      type: :shell, path: "apt_installDocker.sh",       privileged: true
        linuxbox.vm.provision "sys_setJavaCerts.sh",       type: :shell, path: "sys_setJavaCerts.sh",        privileged: true
        linuxbox.vm.provision "user_installNVM.sh",        type: :shell, path: "user_installNVM.sh",         privileged: false
      end
      # more common stuff
      linuxbox.vm.provision "platform_id_rsa", type: :file,  source: '../global/platform_id_rsa', destination: "/home/#{configs['vagrant_user']}/.ssh/platform_id_rsa"
      linuxbox.vm.provision "platform_id_rsa_chmod", type: :shell, privileged: false, inline: <<-SHELL
          chmod 600 /home/#{configs['vagrant_user']}/.ssh/platform_id_rsa
        SHELL
      linuxbox.vm.provision "platform_id_rsa.pub", type: :file,  source: '../global/platform_id_rsa.pub', destination: "/home/#{configs['vagrant_user']}/.ssh/platform_id_rsa.pub"
      linuxbox.vm.provision "platform_id_rsa.pub_chmod", type: :shell, privileged: false, inline: <<-SHELL
          chmod 644 /home/#{configs['vagrant_user']}/.ssh/platform_id_rsa.pub
          if ! grep -q xyPlatform "/home/#{configs['vagrant_user']}/.ssh/authorized_keys" ; then
            cat /home/#{configs['vagrant_user']}/.ssh/platform_id_rsa.pub >> /home/#{configs['vagrant_user']}/.ssh/authorized_keys
          fi
        SHELL
      linuxbox.vm.provision "user_setTrustedCerts.sh",   type: :shell, path: "user_setTrustedCerts.sh", args: [configs['vagrant_user']], privileged: false
      linuxbox.vm.provision "user_setUserEnv.sh",        type: :shell, path: "user_setUserEnv.sh", args: [configs['vagrant_user']], privileged: false
      linuxbox.vm.synced_folder configs['sync_folder_Projects'], "/home/#{configs['vagrant_user']}/Projects", create: true,
        id: 'Projects', owner: 'vagrant', group: 'vagrant'
    end # config.vm.define box[:name] do |linuxbox|
  end # boxes.each do |box|
end # Vagrant.configure(2) do |config|
