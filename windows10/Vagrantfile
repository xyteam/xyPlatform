# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require YAML module
require 'yaml'
# Read YAML file with box details
configs = YAML.load_file('configs.yaml') 

# box name into env var, same script can be used with different boxes. Defaults to win7-ie11.
# box_name = box_name = ENV['box_name'] != nil ? ENV['box_name'].strip : 'win7-ie11'
# box repo into env var, so private repos/cache can be used. Defaults to http://aka.ms

# Here we define variables in a boxes array
# These variables by themself do not do anyting, they are used in actual vagrant configuration later
# base boxes have port conflict amoung them, should be up by one at a time
boxes = [
  {:name=>"win10Base", :box_name=>'kganguly/MSEdge-Win10',
    :ssh_host_port=>20022, :winrm_https_port=>20986, :winrm_http_port=>20985},
  {:name=>"win10desktop01", :box_name=>'win10Base', :box_url=>'file://win10Base.box',
    :ssh_host_port=>21022, :winrm_https_port=>21986, :winrm_http_port=>21985},
  {:name=>"win10desktop02", :box_name=>'win10Base',
    :ssh_host_port=>22022, :winrm_https_port=>22986, :winrm_http_port=>22985},
  {:name=>"win10desktop03", :box_name=>'win10Base',
    :ssh_host_port=>23022, :winrm_https_port=>23986, :winrm_http_port=>23985},
  {:name=>"win10desktop04", :box_name=>'win10Base',
    :ssh_host_port=>24022, :winrm_https_port=>24986, :winrm_http_port=>24985},
  {:name=>"win10desktop05", :box_name=>'win10Base',
    :ssh_host_port=>25022, :winrm_https_port=>25986, :winrm_http_port=>25985},
  {:name=>"win10desktop06", :box_name=>'win10Base',
    :ssh_host_port=>26022, :winrm_https_port=>26986, :winrm_http_port=>26985},
  {:name=>"win10desktop07", :box_name=>'win10Base',
    :ssh_host_port=>27022, :winrm_https_port=>27986, :winrm_http_port=>27985},
  {:name=>"win10desktop08", :box_name=>'win10Base',
    :ssh_host_port=>28022, :winrm_https_port=>28986, :winrm_http_port=>28985}
  ]

Vagrant.configure("2") do |config|

  ##############################################################
  # Below we configure common stuff for all VMs in this folder #
  config.vm.boot_timeout = 500
  config.vm.box_check_update = false
  config.vm.synced_folder configs['sync_folder_Projects'], "C:\\Users\\#{configs['vagrant_user']}\\Projects", run: "always"
  config.vm.communicator = ENV['communicator'] || "winrm"

  # winrm config, uses modern.ie default user/password. If other credentials are used must be changed here
  config.winrm.username = "#{configs['vagrant_user']}"
  config.winrm.password = "#{configs['vagrant_password']}"
  config.winrm.basic_auth_only = true
  config.ssh.private_key_path = "../global/platform_id_rsa"
  config.ssh.forward_agent = true
  config.ssh.username = "#{configs['vagrant_user']}"
  config.ssh.password = "#{configs['vagrant_password']}"
  config.ssh.insert_key = false
  config.ssh.shell = 'bash -l'
  config.ssh.sudo_command = ''

  # for VirtualBox
  config.vm.provider "virtualbox" do |vb|
    # first setup requires gui to be enabled so scripts can be executed in virtualbox guest screen
    vb.linked_clone = true
    vb.gui = false
    vb.cpus = configs['cpus']
    vb.memory = configs['memory']
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vboxvga"]
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--vrde", "on"]
    vb.customize ["modifyvm", :id, "--vtxux", "off"]
    vb.customize ["modifyvm", :id, "--vtxvpid", "off"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "off"]
    vb.customize ["modifyvm", :id, "--boot1", "disk"]
    vb.customize ["modifyvm", :id, "--boot2", "dvd"]
    vb.customize ["modifyvm", :id, "--usb", "off"]
    vb.customize ["modifyvm", :id, "--usbehci", "off"]
    vb.customize ["modifyvm", :id, "--usbxhci", "off"]
    vb.customize ["modifyvm", :id, "--audio", "none"]
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    vb.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/ --timesync-set-threshold", 10000]
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
      config.vbguest.auto_update = true
  end

  # # set corporate proxy
  # if Vagrant.has_plugin?("vagrant-proxyconf")
  #   config.proxy.http     = "http://#{configs['http_proxy_host_port']}"
  #   config.proxy.https    = "http://#{configs['http_proxy_host_port']}"
  #   config.proxy.no_proxy = "#{configs['no_proxy']}"
  # end

  # Above we configure common stuff for all VMs in this folder #
  # ############################################################

  # Here we configure and provision stuff based on box name
  boxes.each do |box|
    config.vm.define box[:name] do |winbox|
      winbox.trigger.before :up, :reload do |trigger|
        trigger.info = "Checking platform key"
        trigger.run = {path: "../global/check_platformKey.sh"}
      end
      winbox.vm.guest = :windows
      winbox.vm.box = box[:box_name]
      winbox.vm.box_url = box[:box_url]
      winbox.vm.network :forwarded_port, guest: 22,   host: box[:ssh_host_port], id: "ssh", auto_correct: true
      winbox.vm.network :forwarded_port, guest: 5985, host: box[:winrm_http_port], id: "winrm", auto_correct: true
      # set vm name in virtualbox
      winbox.vm.provider "virtualbox" do |vb|
        vb.name = box[:name]
      end
      if config.vm.communicator.to_s.include? "ssh"
        winbox.vm.provision "authorized_keys", type: :file,  source: '../global/platform_id_rsa.pub', destination: ".ssh/authorized_keys"
        winbox.vm.provision "selnium_config", type: :file,  source: '../global/selenium-standalone_config.js', destination: "Documents/selenium-standalone_config.js"
      end
      if config.vm.communicator.to_s.include? "winrm"
        # really base on box name
        # puts "box name: " + winbox.vm.box.to_s
        # puts "vm name: " + box[:name].to_s
        if box[:name].to_s.include? "Base"
          # winbox.vm.provision "setIEProxyCACerts.bat", type: :shell, path: "./setIEProxyCACerts.bat", args: [configs['http_proxy_host_port']], privileged: true
          winbox.vm.provision "setEnableTLS12", type: :shell, path: './setEnableTLS12.bat', privileged: true
          # winbox.vm.provision "setKeysPermission", type: :shell, path: './setKeysPermission.bat', privileged: false
          winbox.vm.provision "installJre8", type: :shell, inline: "choco install jre8 -PackageParameters \"/exclude:32\" -y", privileged: true
          winbox.vm.provision "installNodejsLTS", type: :shell, inline: "choco install nodejs-lts -y", privileged: true
          winbox.vm.provision "installGoogleChrome", type: :shell, inline: "choco install googlechrome -y", privileged: true
          winbox.vm.provision "installSDelete", type: :shell, inline: "choco install SDelete -y", privileged: true
          winbox.vm.provision "installSeleniumStandalone.bat", type: :shell, path: "./installSeleniumStandalone.bat", privileged: false
          winbox.vm.provision "installSeleniumDrivers.bat", type: :shell, path: "./installSeleniumDrivers.bat", privileged: false
          winbox.vm.provision "setAutoLogon.bat", type: :shell, path: "./setAutoLogon.bat", args: [configs['vagrant_user'],configs['vagrant_password']], privileged: true
          winbox.vm.provision "setEnableRDP.bat", type: :shell, path: "./setEnableRDP.bat", privileged: true
          winbox.vm.provision "setUnblockApps.bat", type: :shell, path: "./setUnblockApps.bat", privileged: true
        end
        # winbox.vm.provision "runSeleniumStandalone.bat", type: :shell, path: "./runSeleniumStandalone.bat", powershell_args: "--â€“PassThru", powershell_elevated_interactive: true, privileged: true, run: "always"
      end
    end
  end
end
